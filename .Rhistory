color = c("blue", "red", "blue", "blue", "blue", "blue", "blue", "blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = sources,
target = targets,
value =  values
)
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "B1", "B2", "C1", "C2"),
color = c("blue", "blue", "blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = c(0,1,0,2,3,3),
target = c(2,3,3,4,4,5),
value =  c(8,4,2,8,4,2)
)
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "A3", "B1", "B2", "B3"),
color = c("red", "green", "blue", "blue", "blue", "blue"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = c(0,1,0,2,2,1),
target = c(3,4,5,4,5,4),
value =  c(8,4,2,8,4,2)
)
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = c("A1", "A2", "A3", "B1", "B2", "B3"),
color = c("red", "green", "blue", "yellow", "orange", "black"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = c(0,1,0,2,2,1),
target = c(3,4,5,4,5,4),
value =  c(8,4,2,8,4,2)
)
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
labels
labels <- c("T1-1000-Vegetacion", "T1-2000-Sin vegetacion", "T1-3000-Agua",
"T1-4000 Nubes y sombras", "T1-5000-Sin informacion",
"T2-1000-Vegetacion", "T2-2000-Sin vegetacion", "T2-3000-Agua",
"T2-4000 Nubes y sombras", "T2-5000-Sin informacion")
labels
sources
# Contar las combinaciones de t1_codigo y t2_codigo
conteo_combinaciones <-
puntos_sankey |>
count(t1_codigo, t2_codigo)
View(conteo_combinaciones)
sources <- conteo_combinaciones$t1_codigo
targets <- conteo_combinaciones$t2_codigo
values <- conteo_combinaciones$n
sources
# Agregar las nuevas columnas utilizando los mapeos
puntos_sankey <- puntos_sankey |>
mutate(
t1_codigo = case_when(
t1_cobertura == 'T1-1000-Vegetacion' ~ 0,
t1_cobertura == 'T1-2000-Sin vegetacion' ~ 1,
t1_cobertura == 'T1-3000-Agua' ~ 2,
t1_cobertura == 'T1-4000 Nubes y sombras' ~ 3,
t1_cobertura == 'T1-5000-Sin informacion' ~ 4
),
t2_codigo = case_when(
t2_cobertura == 'T2-1000-Vegetacion' ~ 5,
t2_cobertura == 'T2-2000-Sin vegetacion' ~ 6,
t2_cobertura == 'T2-3000-Agua' ~ 7,
t2_cobertura == 'T2-4000 Nubes y sombras' ~ 8,
t2_cobertura == 'T2-5000-Sin informacion' ~ 9
)
)
View(puntos_sankey)
conteo_combinaciones <-
puntos_sankey |>
count(t1_codigo, t2_codigo)
View(conteo_combinaciones)
sources <- conteo_combinaciones$t1_codigo
targets <- conteo_combinaciones$t2_codigo
values <- conteo_combinaciones$n
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = labels,
color = c("red", "green", "blue", "yellow", "orange", "black", "violet", "cyan", "purple", "pink"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = c(0,1,0,2,2,1),
target = c(3,4,5,4,5,4),
value =  c(8,4,2,8,4,2)
)
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
labels <- c("T1-1000-Vegetacion", "T1-2000-Sin vegetacion", "T1-3000-Agua",
"T1-4000 Nubes y sombras", "T1-5000-Sin informacion",
"T2-1000-Vegetacion", "T2-2000-Sin vegetacion", "T2-3000-Agua",
"T2-4000 Nubes y sombras", "T2-5000-Sin informacion")
# Agregar las nuevas columnas utilizando los mapeos
puntos_sankey <- puntos_sankey |>
mutate(
t1_codigo = case_when(
t1_cobertura == 'T1-1000-Vegetacion' ~ 0,
t1_cobertura == 'T1-2000-Sin vegetacion' ~ 1,
t1_cobertura == 'T1-3000-Agua' ~ 2,
t1_cobertura == 'T1-4000 Nubes y sombras' ~ 3,
t1_cobertura == 'T1-5000-Sin informacion' ~ 4
),
t2_codigo = case_when(
t2_cobertura == 'T2-1000-Vegetacion' ~ 5,
t2_cobertura == 'T2-2000-Sin vegetacion' ~ 6,
t2_cobertura == 'T2-3000-Agua' ~ 7,
t2_cobertura == 'T2-4000 Nubes y sombras' ~ 8,
t2_cobertura == 'T2-5000-Sin informacion' ~ 9
)
)
# Contar las combinaciones de t1_codigo y t2_codigo
conteo_combinaciones <-
puntos_sankey |>
count(t1_codigo, t2_codigo)
# Crear las listas separadas
sources <- conteo_combinaciones$t1_codigo
targets <- conteo_combinaciones$t2_codigo
values <- conteo_combinaciones$n
fig <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = labels,
color = c("red", "green", "blue", "yellow", "orange", "black", "violet", "cyan", "purple", "pink"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = sources,
target = targets,
value =  values
)
)
fig <- fig %>% layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
#| label: grafico-sankey
#| warning: false
#| message: false
#| code-fold: true
puntos_sankey <-
puntos |>
select(sample_id, t1_cobertura, t2_cobertura)
# write_csv(puntos_sankey, "puntos_sankey.csv")
# puntos_sankey <- read_csv("puntos_sankey.csv")
# El prefijo es para diferenciar t1 y t2 en el gráfico de Sankey
puntos_sankey <-
puntos_sankey |>
mutate(
t1_cobertura = paste0("T1-", t1_cobertura),
t2_cobertura = paste0("T2-", t2_cobertura)
)
label <- c("T1-1000-Vegetacion", "T1-2000-Sin vegetacion", "T1-3000-Agua",
"T1-4000 Nubes y sombras", "T1-5000-Sin informacion",
"T2-1000-Vegetacion", "T2-2000-Sin vegetacion", "T2-3000-Agua",
"T2-4000 Nubes y sombras", "T2-5000-Sin informacion")
# Agregar columnas de códigos para usar en el gráfico de Sankey
puntos_sankey <- puntos_sankey |>
mutate(
t1_codigo = case_when(
t1_cobertura == 'T1-1000-Vegetacion' ~ 0,
t1_cobertura == 'T1-2000-Sin vegetacion' ~ 1,
t1_cobertura == 'T1-3000-Agua' ~ 2,
t1_cobertura == 'T1-4000 Nubes y sombras' ~ 3,
t1_cobertura == 'T1-5000-Sin informacion' ~ 4
),
t2_codigo = case_when(
t2_cobertura == 'T2-1000-Vegetacion' ~ 5,
t2_cobertura == 'T2-2000-Sin vegetacion' ~ 6,
t2_cobertura == 'T2-3000-Agua' ~ 7,
t2_cobertura == 'T2-4000 Nubes y sombras' ~ 8,
t2_cobertura == 'T2-5000-Sin informacion' ~ 9
)
)
# Contar las combinaciones de t1_codigo y t2_codigo
conteo_combinaciones <-
puntos_sankey |>
count(t1_codigo, t2_codigo)
# Crear las listas separadas
source <- conteo_combinaciones$t1_codigo
target <- conteo_combinaciones$t2_codigo
value <- conteo_combinaciones$n
# Gráfico de Sankey
fig <-
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = labels,
color = c("red", "green", "blue", "yellow", "orange", "black", "violet", "cyan", "purple", "pink"),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = sources,
target = targets,
value =  values
)
)
fig <-
fig |> layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
puntos_sankey <-
puntos |>
select(sample_id, t1_uso, t2_uso)
View(puntos_sankey)
View(puntos_sankey)
unique(puntos_sankey$t1_uso)
puntos_sankey <-
puntos_sankey |>
mutate(
t1_uso = paste0("T1-", t1_uso),
t2_uso = paste0("T2-", t2_uso)
)
unique(puntos_sankey$t1_uso)
label <- c("T1-1000-MC bosques", "T1-2000-Agricultura", "T1-3000-Ganad y past",
"T1-4000-Zonas humed", "T1-5000-Infraest",
"T1-6000-Otras tierras", "T1-7000 No clasif",
"T2-1000-MC bosques", "T2-2000-Agricultura", "T2-3000-Ganad y past",
"T2-4000-Zonas humed", "T2-5000-Infraest",
"T2-6000-Otras tierras", "T2-7000 No clasif")
puntos_sankey <- puntos_sankey |>
mutate(
t1_codigo = case_when(
t1_uso == 'T1-1000-MC bosques' ~ 0,
t1_uso == 'T1-2000-Agricultura' ~ 1,
t1_uso == 'T1-3000-Ganad y past' ~ 2,
t1_uso == 'T1-4000-Zonas humed' ~ 3,
t1_uso == 'T1-5000-Infraest' ~ 4,
t1_uso == 'T1-6000-Otras tierras' ~ 5,
t1_uso == 'T1-7000 No clasif' ~ 6
),
t2_codigo = case_when(
t2_uso == 'T2-1000-MC bosques' ~ 7,
t2_uso == 'T2-2000-Agricultura' ~ 8,
t2_uso == 'T2-3000-Ganad y past' ~ 9,
t2_uso == 'T2-4000-Zonas humed' ~ 10,
t2_uso == 'T2-5000-Infraest' ~ 11,
t2_uso == 'T2-6000-Otras tierras' ~ 12,
t2_uso == 'T2-7000 No clasif' ~ 13
)
)
conteo_combinaciones <-
puntos_sankey |>
count(t1_codigo, t2_codigo)
View(conteo_combinaciones)
source <- conteo_combinaciones$t1_codigo
target <- conteo_combinaciones$t2_codigo
value <- conteo_combinaciones$n
# Contar las combinaciones de t1_codigo y t2_codigo
conteo_combinaciones <-
puntos_sankey |>
count(t1_codigo, t2_codigo)
# Crear las listas separadas
source <- conteo_combinaciones$t1_codigo
target <- conteo_combinaciones$t2_codigo
value <- conteo_combinaciones$n
# Gráfico de Sankey
fig <-
plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = label,
color = c(
"red", "green", "blue", "yellow", "orange", "black", "violet",
"red", "green", "blue", "yellow", "orange", "black", "violet"
),
pad = 15,
thickness = 20,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = source,
target = target,
value =  value
)
)
fig <-
fig |> layout(
title = "Basic Sankey Diagram",
font = list(
size = 10
)
)
fig
PBpoparea <-
modPBpop(
pnt = puntos,
pltassgnid = "plot_id",
pntid = "sample_id",
unitarea = 1
)
PBpoparea
PBpoparea <-
modPBpop(
pnt = puntos,
pltassgnid = "plot_id",
pntid = "sample_id",
unitarea = 318167.67,
tabtype="AREA"
)
PBpoparea <-
modPBpop(
pnt = puntos,
pltassgnid = "plot_id",
pntid = "sample_id",
unitarea = 318167.67
)
coberT1vT2 <-
modPB(
PBpopdat = PBpoparea,
rowvar = "t1_cobertura",
colvar = "t2_cobertura"
)
coberT1vT2
coberT1vT2$est
View(puntos)
#| label: parametros_generales
#| warning: false
#| message: false
#| code-fold: show
# Ruta a los datos de puntos de muestreo
ARCHIVO_PUNTOS <- "datos/Resul_Fin_2Grupos_SinReplicas_csv_Fix.csv"
# Colores
#| label: carga-datos-puntos-muestreo
#| warning: false
#| message: false
#| code-fold: show
# Carga de datos de puntos de muestreo
puntos <- read_delim(ARCHIVO_PUNTOS)
# Limpieza de los nombres de columnas
puntos <- clean_names(puntos)
# Coversión a de t1_cobertura y t2_cobertura a factores
puntos <-
puntos |>
mutate(
t1_cobertura = factor(t1_cobertura, levels = unique(t1_cobertura)),
t2_cobertura = factor(t2_cobertura, levels = unique(t2_cobertura))
)
View(puntos)
#| label: tabla-datos-puntos-muestreo
#| warning: false
#| message: false
#| code-fold: true
# Despliegue de los datos de puntos de muestreo en una tabla
puntos |>
select(plot_id, sample_id, t1_cobertura, t2_cobertura, t1_uso, t2_uso) |>
datatable(
caption = "Puntos de muestreo de cobertura y uso de la tierra",
rownames = FALSE,
colnames = c(
"plot_id", "sample_id",
"t1_cobertura", "t2_cobertura",
"t1_uso", "t2_uso"
),
options = list(
pageLength = 5,
language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
)
)
#| label: grafico-barras-distribucion-t1
#| warning: false
#| message: false
#| code-fold: true
# Paleta de colores
mi_paleta <-
c(
"1000-Vegetacion" = "green"
)
# Gráfico de barras ggplot2
grafico_barras <-
puntos |>
# ggplot(aes(x = fct_infreq(t1_cobertura))) +
ggplot(aes(x = fct_infreq(t1_cobertura), fill = fct_infreq(t1_cobertura))) +
geom_bar(
aes(
text = paste0(
"Cantidad de puntos: ", after_stat(count)
)
)
) +
scale_fill_manual(values = mi_paleta) +
ggtitle("Distribución de cobertura en t1") +
xlab("Cobertura") +
ylab("Cantidad de puntos") +
theme_clean() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de barras plotly
ggplotly(grafico_barras, tooltip = "text") |>
config(locale = 'es')
#| label: mapa-puntos-muestreo-cobertura
#| warning: false
#| message: false
#| code-fold: true
#| code-summary: "Código para la generación del mapa"
# Conversión de datos de puntos de muestreo a objeto sf (vectorial de puntos)
geo_puntos <-
puntos |>
select(plot_id, sample_id, lon, lat, t1_cobertura, t2_cobertura) |>
st_as_sf(
coords = c("lon", "lat"),
crs = 4326
)
# Paleta de colores basado en los valores únicos de t1_cobertura
#colores_t1 <- colorFactor(
#  palette = viridis(length(unique(geo_puntos$t1_cobertura))),
#  domain = geo_puntos$t1_cobertura
#)
colores_t1 <- manualColor(
values = geo_puntos$t1_cobertura,
palette = COLORES_COBERTURA
)
